head(darwin)
head(ex0428)
difference <-ex0428$Cross - ex0428$Self
print(difference)
View(ex0428)
View(darwin)
#Calculate the mean difference in height
mean(difference)
#standard deviation
sd(difference)
#calculate standard error for the mean
sd(difference)/sqrt(15)
#check distribution with a histogram
darwin %>%
ggplot(aes(x = height)) +
geom_histogram(binwidth = 1, fill = "orchid1", color = "black") +
labs(title = "", x = "Height", y = "Count")
#Isolate Groups for Separate Histograms
#crossed plant histogram
crossed_plants <- filter(darwin, type == "Cross")
View(crossed_plants)
ggplot(crossed_plants, aes(x=height)) +
geom_histogram(binwidth=0.5, color="black", fill="grey") +
theme_minimal() +
xlab("height") +
ylab("frequency")
#Now do it for the selfed plants
selfed_plants <- filter(darwin, type == "Self")
ggplot(selfed_plants, aes(x=height)) +
geom_histogram(binwidth=0.4, color="black", fill="grey") +
theme_minimal() +
xlab("height") +
ylab("frequency")
#calculate the upper and lower bounds of the confidence interval
2.62 - 2 * 1.22 #lower
2.62 + 2 * 1.22 #upper
#Plot the plant height as a function of pollination type
#red line is tallest selfed plant and blue line is shortest crossed plant
ggplot(data = darwin) +
geom_point(aes(x = type, y = height)) +
scale_y_continuous(limits = c(10, 25), minor_breaks = seq(10, 25, 1), breaks = seq(10, 25, 5)) +
geom_hline(yintercept = c(18.1, 20.5), color = c("blue", "red"), linetype = 2) +
theme_bw()
#We still haven't addressed our outliers
#When we apply the jitter function we put space between the points and we are able to
#ID two outliers
ggplot(data = darwin, aes(x = type, y = height)) +
geom_jitter(shape = 1, size = 3, width = 0.08, height = 0)
#We can use the $ as a way to pull a column with that label from the dataframe
mean(darwin$height)
sd(darwin$height)
#OUR FIRST MODEL
#The lm function builds a linear model
# We are telling R that we want to analyze the response variable of Height
# ~ is a way of saying "as a function of" the explanatory variable (pollination in this case)
lsl <- lm(height ~ + type, data = darwin)
display(lsl)
lsl
#Base R has a function called confint that calculates confidence intervals
confint(lsl)
#We can use the confidence interval to test the null hypothesis
#If the confidence interval spans zero, we fail to reject the null
coefplot(lsl, xlim = c(-5, 0))
#what if we increase the confidence interval to 99%
confint(lsl, level = 0.99)
autoplot(lsl, which = c(2), ncol = 1)
graphvariance <- autoplot(lsl, which = c(1,3), ncol = 2)
graphvariance
# Often, we will use levene's test to check variance
thelevene <- leveneTest(height ~ type, data = darwin)
thelevene
# a p-value greater than 0.05 indicates that the variances are not significantly
# a p-value greater than 0.05 indicates that the variances are not significantly
# different between the groups (favorable)
# a p-value greater than 0.05 indicates that the variances are not significantly
# different between the groups (favorable)
# a p-value greater than 0.05 indicates that the variances are not significantly
# different between the groups (favorable)
setwd("~/RESEARCH/BAM/BAM_comparative_genetics/TamA/compare")
library(rstatix)
library(tidyverse)
entero_bam <- read_csv("entero_align_farmed_stats.csv")
entero_tam <- read_csv("enterobact_tamA_rp_farmed_stats.csv")
proteo_bam <- read_csv("proteo_align_farmed_stats.csv")
proteo_tam <- read_csv("proteobacteria_tamA_rp_farmed_stats.csv")
View(entero_bam)
View(entero_bam)
combined_entero <- bind_rows(
entero_bam %>%
select(Position, Proportion) %>%
mutate(type = "BAM"),
entero_tam %>%
select(Position, Proportion) %>%
mutate(type = "TAM")
)
View(combined_entero)
library(rstatix)
library(tidyverse)
entero_bam <- read_csv("entero_align_farmed_stats.csv")
entero_tam <- read_csv("enterobact_tamA_rp_farmed_stats.csv")
proteo_bam <- read_csv("proteo_align_farmed_stats.csv")
proteo_tam <- read_csv("proteobacteria_tamA_rp_farmed_stats.csv")
combined_entero <- bind_rows(
entero_bam %>%
select(Position, Proportion) %>%
mutate(type = "BAM"),
entero_tam %>%
select(Position, Proportion) %>%
mutate(type = "TAM")
)
combined_proteo <- bind_rows(
proteo_bam %>%
select(Position, Proportion) %>%
mutate(type = "BAM"),
proteo_tam %>%
select(Position, Proportion) %>%
mutate(type = "TAM")
)
combined_entero %>%
group_by(type) %>%
summarize(mean = mean(Proportion),
median = median(Proportion),
sd = sd(Proportion),
records = n())
combined_proteo %>%
group_by(type) %>%
summarize(mean = mean(Proportion),
median = median(Proportion),
sd = sd(Proportion),
records = n())
ggplot(combined_entero, aes(x = type, y = Proportion,
fill = type)) +
geom_boxplot() +
labs(x = "Protein Complex", y = "Proportion of Most Common Amino Acid") +
theme_minimal()
ggplot(combined_proteo, aes(x = type, y = Proportion,
fill = type)) +
geom_boxplot() +
labs(x = "Protein Complex", y = "Proportion of Most Common Amino Acid") +
theme_minimal()
qqnorm(combined_entero)
qqline(combined_entero)
qqnorm(combined_proteo)
qqline(combined_proteo)
qqnorm(combined_entero %>% filter(type == "BAM") %>% pull(Proportion))
qqnorm(combined_proteo %>% filter(type == "TAM") %>% pull(Proportion))
qqnorm(combined_entero %>% filter(type == "TAM") %>% pull(Proportion))
qqline(combined_entero %>% filter(type == "BAM") %>% pull(Proportion))
qqline(combined_proteo %>% filter(type == "TAM") %>% pull(Proportion))
qqline(combined_entero %>% filter(type == "TAM") %>% pull(Proportion))
qqline(combined_proteo %>% filter(type == "TAM") %>% pull(Proportion))
combined_entero %>%
group_by(type) %>%
summarize(shapiro_p_value = shapiro.test(Proportion)$p.value,
shapiro_W = shapiro.test(Proportion)$statistic)
combined_proteo %>%
group_by(type) %>%
summarize(shapiro_p_value = shapiro.test(Proportion)$p.value,
shapiro_W = shapiro.test(Proportion)$statistic)
ggplot(combined_entero, aes(x = Proportion, fill = type)) +
geom_histogram(alpha = 0.5, position = "identity", bins = 30) +
labs(x = "Proportion", y = "Count") +
scale_fill_manual(values = c("BAM" = "blue", "TAM" = "red")) +
theme_minimal()
ggplot(combined_proteo, aes(x = Proportion, fill = type)) +
geom_histogram(alpha = 0.5, position = "identity", bins = 30) +
labs(x = "Proportion", y = "Count") +
scale_fill_manual(values = c("BAM" = "blue", "TAM" = "red")) +
theme_minimal()
entero_test <- wilcox.test(Proportion ~ type, data = combined_entero)
proteo_test <- wilcox.test(Proportion ~ type, data = combined_proteo)
print(entero_test)
print(proteo_test)
